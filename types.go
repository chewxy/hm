// Generated by: main
// TypeWriter: smallset
// Directive: +gen on Type

package hm

import (
	"bytes"
	"fmt"
)

//Types is a set of Type
type Types []Type

// NewTypes creates a new set of Type, given an input of any Type
func NewTypes(a ...Type) Types {
	var set Types

	for _, v := range a {
		set = set.Add(v)
	}

	return set
}

// ToSlice returns the elements of the current set as a slice
func (set Types) ToSlice() []Type {
	return []Type(set)
}

// ContainsALl determines if all the wanted items are already in set
func (set Types) ContainsAll(ws ...Type) bool {
	for _, w := range ws {
		if !set.Contains(w) {
			return false
		}
	}
	return true
}

// Add adds an item into the set, and then returns a new set. If the item already exists, it returns the current set
func (set Types) Add(item Type) Types {
	if set.Contains(item) {
		return set
	}
	set = append(set, item)
	return set
}

// IsSubSetOf checks if the current set is a subset of the other set.
func (set Types) IsSubsetOf(other Types) bool {
	if len(set) > len(other) {
		return false
	}

	for _, v := range set {
		if !other.Contains(v) {
			return false
		}
	}

	return true
}

// IsSupersetOf checks if the current set is a superset of the other set
func (set Types) IsSupersetOf(other Types) bool {
	return other.IsSubsetOf(set)
}

// Intersect performs an intersection between two sets - only items that exist in both are returned
func (set Types) Intersect(other Types) Types {
	switch {
	case len(set) == 0 || len(other) == 0:
		return nil
	default:
		retVal := make(Types, 0)
		for _, o := range other {
			if set.Contains(o) {
				retVal = append(retVal, o)
			}
		}
		return retVal
	}
}

//Union joins both sets together, keeping only unique items
func (set Types) Union(other Types) Types {
	switch {
	case len(set) == 0 && len(other) == 0:
		return nil
	case len(set) == 0 && len(other) > 0:
		return other
	case len(set) > 0 && len(other) == 0:
		return set
	default:
		retVal := make(Types, len(set))
		copy(retVal, set)
		for _, o := range other {
			if !retVal.Contains(o) {
				retVal = append(retVal, o)
			}
		}
		return retVal
	}
}

// Difference returns a new set with items in the current set but not in the other set.
// Equivalent to  (set - other)
func (set Types) Difference(other Types) (retVal Types) {
	for _, v := range set {
		if !other.Contains(v) {
			retVal = append(retVal, v)
		}
	}
	return retVal
}

// SymmetricDifference is the set of items that is not in each either set.
func (set Types) SymmetricDifference(other Types) Types {
	aDiff := set.Difference(other)
	bDiff := other.Difference(set)
	return aDiff.Union(bDiff)
}

// Equals compares two sets and checks if it is the same
func (set Types) Equals(other Types) bool {
	if len(set) != len(other) {
		return false
	}

	for _, v := range set {
		if !other.Contains(v) {
			return false
		}
	}

	return true
}

// String for stuff
func (set Types) String() string {
	var buf bytes.Buffer
	buf.WriteString("Types[")
	for i, v := range set {
		if i == len(set)-1 {
			fmt.Fprintf(&buf, "%v", v)
		} else {
			fmt.Fprintf(&buf, "%v, ", v)
		}
	}
	buf.WriteString("]")
	return buf.String()
}

// Contains determines if an item is in the set already. This method uses a custom equality method
func (set Types) Contains(w Type) bool {
	for _, v := range set {
		if v.Eq(w) {
			return true
		}
	}
	return false
}

// Format
func (set Types) Format(state fmt.State, c rune) {
	state.Write([]byte("Types["))
	for i, v := range set {
		if i == len(set)-1 {
			fmt.Fprintf(state, "%v", v)
		} else {
			fmt.Fprintf(state, "%v, ", v)
		}
	}
	state.Write([]byte("]"))
}
